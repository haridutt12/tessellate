syntax = "proto3";

package oogway.tessellate.server;

import "github.com/lyft/protoc-gen-validate/validate/validate.proto";

option go_package = "github.com/oogway/tessellate/server";

service Tessellate {
  rpc SaveWorkspace (SaveWorkspaceRequest) returns (Ok) {}
  rpc GetWorkspace (GetWorkspaceRequest) returns (Workspace) {}
  rpc GetWorkspaceLayouts (GetWorkspaceLayoutsRequest) returns (Layouts) {}

  rpc SaveLayout (SaveLayoutRequest) returns (Ok) {}
  rpc GetLayout (LayoutRequest) returns (Layout) {}

  rpc ApplyLayout (ApplyLayoutRequest) returns (JobStatus) {}
  rpc DestroyLayout (LayoutRequest) returns (JobStatus) {}

  rpc GetJob (JobRequest) returns (JobStatus) {}
  rpc AbortJob (JobRequest) returns (Ok) {}

  rpc StartWatch (StartWatchRequest) returns (Ok) {}
  rpc StopWatch (StopWatchRequest) returns (Ok) {}
}

enum Errors {
  NOT_ALLOWED = 0;
  NOT_FOUND = 1;
  LOCKED = 2;
  INTERNAL_ERROR = 3;
  INVALID_VALUE = 4;
  MISSING_VALUE = 5;
}

enum LayoutStatus {
  INACTIVE = 0;
  ACTIVE = 1;
}

enum JobState {
  PENDING = 0;
  RUNNING = 1;
  FAILED = 2;
  ABORTED = 3;
  DONE = 4;
  ERROR = 5;
}

message GetWorkspaceRequest {
  string Id = 1 [(validate.rules).string.min_len = 1];
}

message Workspace {
  string Name = 1;
  map<string, bytes> Vars = 2;
}

message Layouts {
  repeated Layout layouts = 1;
}

message Layout {
  string Id = 1;
  bytes Plan = 2;
  map<string, bytes> Vars = 3;
  LayoutStatus Status = 4;
}

message SaveWorkspaceRequest {
  string Id = 1 [(validate.rules).string.min_len = 1];
  map<string, bytes> Vars = 2;
}

message GetWorkspaceLayoutsRequest {
  string Id = 1 [(validate.rules).string.min_len = 1];
}

message JobStatus {
  string Id = 1;
  JobState status = 2;
  repeated bytes output = 3;
  repeated bytes error = 4;
}

message Vars {
  map<string, bytes> Vars = 1;
}

message JobRequest {
  string Id = 1 [(validate.rules).string.min_len = 1];
}

message Ok {}

message LayoutRequest {
  string WorkspaceId = 1 [(validate.rules).string.min_len = 1];
  string Id = 2 [(validate.rules).string.min_len = 1];
}

message SaveLayoutRequest {
  string WorkspaceId = 1 [(validate.rules).string.min_len = 1];
  string Id = 2 [(validate.rules).string.min_len = 1];
  map<string, bytes> Plan = 3 [(validate.rules).map = {min_pairs: 1}];
  map<string, bytes> Vars = 4;
}

message ApplyLayoutRequest {
  string WorkspaceId = 1 [(validate.rules).string.min_len = 1];
  string Id = 2 [(validate.rules).string.min_len = 1];
  map<string, bytes> Vars = 3 [(validate.rules).map = {min_pairs: 1}];
  bool dry = 4;
}

message StartWatchRequest {
  string WorkspaceId = 1 [(validate.rules).string.min_len = 1];
  string Id = 2 [(validate.rules).string.min_len = 1];
  string SuccessCallback = 3;
  string FailureCallback = 4;
}

message StopWatchRequest {
  string WorkspaceId = 1 [(validate.rules).string.min_len = 1];
  string Id = 2 [(validate.rules).string.min_len = 1];
}
